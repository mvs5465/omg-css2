<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Stateful application</title>
    <!-- Bootstrap CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="css/style.css" rel="stylesheet" type="text/css">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="js/bootstrap.min.js"></script>
    <script src="js/index.js"></script>
    <script src="js/browser.js"></script>
    <script src="js/react.js"></script>
    <script src="js/react-dom.js"></script>
    <script src="js/classie.js"></script>
    <script type = "text/babel">

var headers = ["OMG-CSS", "Round 1", "Round 2", "Round 3", "Final"];
var data = [
    ["Functionality", 0, 5, 5, 20],
    ["DevOps", 1, 1, 1, 18],
    ["Agile", 1, 1, 1, 13],
    ["Business Value", 1, 1, 1, 9],
    ["Testing", 1, 1, 1, 11],
    ["UI/UX", 1, 1, 1, 14],
];

var headers2 = ["Osama-Who", "Round 1", "Round 2", "Round 3", "Final"];
var data2 = [
    ["Functionality", 0, 5, 5, 20],
    ["DevOps", 1, 1, 1, 1],
    ["Agile", 1, 1, 1, 13],
    ["Business Value", 1, 1, 1, 14],
    ["Testing", 1, 1, 1, 14],
    ["UI/UX", 1, 1, 1, 14],
];

var Excel = React.createClass({
    getInitialState: function () {
        return {
            data: this.props.initialData,
            edit: null
        };
    },

    propTypes: {
        /*headers: React.PropTypes.arrayOf(
            React.PropTypes.string
        ),
        initialData: React.PropTypes.arrayOf(
            React.PropTypes.arrayOf(
                React.PropTypes.number
            )
        ),*/
    },

    _sort: function (event) {
        var column = event.target.cellIndex;
        var data = this.state.data.slice();
        data.sort(function (a, b) {
            return a[column] < b[column];
        });
        this.setState({
            data: data,
        });
    },

    _showEditor: function (event) {
        this.setState({
            edit: {
                row: parseInt(event.target.dataset.row, 10),
                cell: event.target.cellIndex,
            }
        });
        /*$('#myModal').on('shown.bs.modal', function()) {
          $('#myInput').focus()
        })*/
    },

    _save: function (event) {
        event.preventDeafult();
        var input = event.target.firstChild;
        console.log(input);
        var data = this.state.data.slice();
        data[this.state.edit.row][this.state.edit.cell] += input.value;
        this.setState({
            edit: null,
            data: data,
        });
    },
    
    _getComponent : function (event) {
      
        //Console.log(this.state.data.slice());
       //alert("open modal");
        $('#myModal').modal('show');
    
    },

    render: function () {
        return (
            React.DOM.table({
                    id: "omgtable",
                    className: "table table-striped table-hover",
                },
                React.DOM.thead({
                        onClick: this._sort,
                        style: {
                            background: "#353535",
                            color: "white",
                        }
                    },
                    React.DOM.tr({
                            className: "header"
                        },
                        this.props.headers.map(function (title, idx) {
                            return React.DOM.th({
                                key: idx
                            }, title);
                        })
                    )
                ),
                React.DOM.tbody({
                        onDrag: this._showEditor,
                        onDoubleClick: this._getComponent,
                        className : "table-element",
                        style: {
                            background: "grey",
                            color: "black",
                        },
                        
                        
                    },
                    this.state.data.map(function (row, rowidx) {
                        return (
                            React.DOM.tr({
                                    key: rowidx,
                                },
                                row.map(function (cell, idx) {
                                    var content = cell;
                                    //turn 'content' into an input if the idx and rowid match the ne being editd
                                    //otherwise just show the text content
                                    var edit = this.state.edit;
                                    if (edit && edit.row === rowidx && edit.cell === idx) {
                                        content = React.DOM.form({
                                                onSubmit: this._save
                                            },
                                            React.DOM.input({
                                                type: 'text',
                                                defaultValue: content,
                                            })
                                        );
                                    }
                                    return React.DOM.td({
                                        key: idx,
                                        className : "table-element",
                                        'data-row': rowidx,
                                    }, content);
                                }, this)
                            )
                        );
                    }, this)
                )
            )
        );
    }
});

////////////////////////////////RENDERING/////////////////////////////

ReactDOM.render(
    React.createElement(Excel, {
        headers: headers,
        initialData: data,
    }),
    document.getElementById("react-app")
);

ReactDOM.render(
    React.createElement(Excel, {
        headers: headers2,
        initialData: data2,
    }),
    document.getElementById("react-app-2")
);

/*
ReactDOM.render(
    <form>
        First name:<br/>
        <input type="text" name="firstname" className="form-control" placeholder="Text input"/><br/>
        Last name:<br/>
        <input type="text" name="lastname" className="form-control" placeholder="Text input"/><br/><br/>
        Feedback:<br/>
        <textarea className="form-control" rows="3">
        </textarea><br/>
        <br/>
    </form>,
    document.getElementById("jsx")
);*/


    </script>
    

</head>

<body style="">
    <div class="container-fluid">
        <div class="row" id="headline">
            <div class="col-sm-12">
                <h1>New Hire Hackathon</h1>
                <p>Judge's Scoreboard</p>
            </div>
        </div>
        <br/>
        <div class="row">
            <div class="col-sm-12">
                <div id="react-app">
                    <h1>hello, hi Charlotte</h1>
                    <!-- react components will be rendered here -->
                    <h3>Unsuccessful rendering for table 1</h3>
                </div>
                <br/>
                <div id="react-app-2">
                    <!-- react components will be rendered here -->
                    <h3>Unsuccessful rendering for table 2</h3>
                </div>
                <div id="jsx">
                    <!-- react components will be rendered here -->
                    <h3 id="table">Unsuccessful rendering for jsx</h3>
                </div>
            </div>
        </div>
    </div>
    
    
    <!-- Modal -->
    <div id="myModal" class="modal fade" role="dialog">
        <div class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">Modal title</h4>
                    </div>
                    <div class="modal-body">
                        <p>One fine body&hellip;</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                </div>
                <!-- /.modal-content -->
            </div>
            <!-- /.modal-dialog -->
        </div>
        <!-- /.modal -->
    </div>
    

    
    
</body>

</html>